# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when a release is created
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Set up secrets in your workspace: GKE_PROJECT with the name of the project and GKE_SA_KEY with the Base64 encoded JSON service account key (https://github.com/GoogleCloudPlatform/github-actions/tree/docs/service-account-key/setup-gcloud#inputs).
#
# 3. Change the values for the GKE_ZONE, GKE_CLUSTER, IMAGE, and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke

name: Backend - Build and Deploy to GKE

on:
  push:
    paths:
    - backend/**
    - .github/workflows/backend_deployment_ci_cd.yaml
    branches:
    - dev

env:
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER}} 
  GKE_ZONE: ${{ secrets.REGION}}  
  DEPLOYMENT_NAME: ${{ secrets.BE_DEPLOY_NAME}} #  # Should take Image name from deployment_scripts_github/backend/deployment-backend file - metadata.name
  IMAGE_NAME: flaskapp # Should take Image name from deployment_scripts_github/backend/deployment-backend file - spec.template.labels.app
  USERNAME: ${{ secrets.USERNAME}}
  CONTAINER_NAME: flask-app-container # Should take Container name from deployment_scripts_github/backend/deployment-backend file - spec.template.spec.containers.name

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: dev

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        service_account_key: ${{ secrets.GOOGLE_CREDENTIALS }}
        project_id: ${{ secrets.PROJECT_ID }}

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication
    - run: |-
        gcloud --quiet auth configure-docker

    # Get the GKE credentials so we can deploy to the cluster
    - uses: google-github-actions/get-gke-credentials@v0.2.1
      with:
        cluster_name: ${{ secrets.GKE_CLUSTER }}
        location: ${{ secrets.REGION }}
        credentials: ${{ secrets.GOOGLE_CREDENTIALS }}

    #### Google Container Registry ####
    
    # Build the Docker image
    # - name: Build
    #   run: |-
    #     docker build \
    #       --tag "gcr.io/${PROJECT_ID}/${IMAGE_NAME}:$GITHUB_SHA" \
    #       --build-arg GITHUB_SHA="$GITHUB_SHA" \
    #       --file "backend/Dockerfile" \
    #       ./backend

    # Push the Docker image to Google Container Registry
    # - name: Publish
    #   run: |-
    #     docker push "gcr.io/${PROJECT_ID}/${IMAGE_NAME}:$GITHUB_SHA"

    #### GitHub Container Registry ####
    
    - name: Authenticating GHCR
      run: |-
        export CR_PAT=${{secrets.GITHUB_TOKEN}}
        echo $CR_PAT | docker login ghcr.io -u ${USERNAME} --password-stdin

    # Build the Docker image
    - name: Build
      run: |-
        docker build \
          --tag "ghcr.io/${USERNAME}/${IMAGE_NAME}:$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --file "backend/Dockerfile" \
          ./backend

    # Push the Docker image to Google Container Registry
    - name: Publish
      run: |-
        docker push "ghcr.io/${USERNAME}/${IMAGE_NAME}:$GITHUB_SHA"

    # Deploy the Docker image to the GKE cluster
    # **********************************************************************************
    # Uncomment the below code for the initial deployment
    # Below code will deploy the backend everytime when this workflow runs
    # **********************************************************************************

#    # Set up kustomize
#     - name: Set up Kustomize
#       run: |-
#         curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
#         chmod u+x ./kustomize
    
#     - name: Initail Deployment & Service Creation
# #### First four lines are replacing the $PROJECT_ID in deployment-backend.yaml with environment variable
#       run: |-
#         originalFile=deployment_scripts_github/backend/deployment-backend.yaml
#         tmpfile=$(mktemp)
#         cat $originalFile | envsubst > "$tmpfile" && cp -pf "$tmpfile" $originalFile
#         rm -f "$tmpfile"
#         ./kustomize build deployment_scripts_github/backend | kubectl apply -f -
#         kubectl rollout status deployment/$DEPLOYMENT_NAME
#         kubectl get services -o wide
    
    # Deploy the Docker image to the GKE cluster
    # **********************************************************************************
    # Uncomment the below code for the continuos deployment
    # Below code will update the contianer image with new image
    # **********************************************************************************
    
    - name: Continuos Deployment
      run: |-
        kubectl set image deployment/$DEPLOYMENT_NAME $CONTAINER_NAME=ghcr.io/${USERNAME}/${IMAGE_NAME}:$GITHUB_SHA

